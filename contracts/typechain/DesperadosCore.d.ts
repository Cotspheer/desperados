/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DesperadosCoreInterface extends ethers.utils.Interface {
  functions: {
    "DESOS()": FunctionFragment;
    "DESOS_FREE()": FunctionFragment;
    "HOTEL()": FunctionFragment;
    "MINE()": FunctionFragment;
    "SALOON()": FunctionFragment;
    "TOKEN_NAME()": FunctionFragment;
    "TRADING_POST()": FunctionFragment;
    "TRAIN_STATION()": FunctionFragment;
    "WORKER()": FunctionFragment;
    "_rewardDesos(address,uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "completeWorldActionCooldown(address)": FunctionFragment;
    "getCompleteWorldActionCooldownEstimatedFee(address)": FunctionFragment;
    "getCurrentWorldActionCooldownFor(address)": FunctionFragment;
    "getFreeDesos(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mineOre(address)": FunctionFragment;
    "mintHotel(address)": FunctionFragment;
    "mintMine(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseFee(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "worldActionASuccessProbabilities(uint256)": FunctionFragment;
    "worldActionCooldowns(uint256)": FunctionFragment;
    "worldActionCooldownsSeconds(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DESOS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DESOS_FREE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "HOTEL", values?: undefined): string;
  encodeFunctionData(functionFragment: "MINE", values?: undefined): string;
  encodeFunctionData(functionFragment: "SALOON", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TOKEN_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADING_POST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRAIN_STATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WORKER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_rewardDesos",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "completeWorldActionCooldown",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompleteWorldActionCooldownEstimatedFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentWorldActionCooldownFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreeDesos",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "mineOre", values: [string]): string;
  encodeFunctionData(functionFragment: "mintHotel", values: [string]): string;
  encodeFunctionData(functionFragment: "mintMine", values: [string]): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "worldActionASuccessProbabilities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "worldActionCooldowns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "worldActionCooldownsSeconds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DESOS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DESOS_FREE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "HOTEL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MINE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SALOON", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOKEN_NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TRADING_POST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRAIN_STATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WORKER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_rewardDesos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeWorldActionCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompleteWorldActionCooldownEstimatedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentWorldActionCooldownFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreeDesos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mineOre", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintHotel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintMine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "worldActionASuccessProbabilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldActionCooldowns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldActionCooldownsSeconds",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    account: string;
    operator: string;
    approved: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]] & {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type URIEvent = TypedEvent<
  [string, BigNumber] & { value: string; id: BigNumber }
>;

export class DesperadosCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DesperadosCoreInterface;

  functions: {
    DESOS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DESOS_FREE(overrides?: CallOverrides): Promise<[BigNumber]>;

    HOTEL(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SALOON(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOKEN_NAME(overrides?: CallOverrides): Promise<[string]>;

    TRADING_POST(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRAIN_STATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    WORKER(overrides?: CallOverrides): Promise<[BigNumber]>;

    _rewardDesos(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    completeWorldActionCooldown(
      _caller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCompleteWorldActionCooldownEstimatedFee(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { estimatedFeeToPay: BigNumber }>;

    getCurrentWorldActionCooldownFor(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, BigNumber] & {
          actionType: number;
          cooldownTimestamp: BigNumber;
        }
      ]
    >;

    getFreeDesos(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mineOre(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintHotel(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintMine(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseFee(
      baseFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    worldActionASuccessProbabilities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    worldActionCooldowns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    worldActionCooldownsSeconds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  DESOS(overrides?: CallOverrides): Promise<BigNumber>;

  DESOS_FREE(overrides?: CallOverrides): Promise<BigNumber>;

  HOTEL(overrides?: CallOverrides): Promise<BigNumber>;

  MINE(overrides?: CallOverrides): Promise<BigNumber>;

  SALOON(overrides?: CallOverrides): Promise<BigNumber>;

  TOKEN_NAME(overrides?: CallOverrides): Promise<string>;

  TRADING_POST(overrides?: CallOverrides): Promise<BigNumber>;

  TRAIN_STATION(overrides?: CallOverrides): Promise<BigNumber>;

  WORKER(overrides?: CallOverrides): Promise<BigNumber>;

  _rewardDesos(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  completeWorldActionCooldown(
    _caller: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCompleteWorldActionCooldownEstimatedFee(
    _caller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentWorldActionCooldownFor(
    _caller: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber] & { actionType: number; cooldownTimestamp: BigNumber }
  >;

  getFreeDesos(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mineOre(
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintHotel(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintMine(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseFee(
    baseFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  worldActionASuccessProbabilities(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  worldActionCooldowns(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  worldActionCooldownsSeconds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    DESOS(overrides?: CallOverrides): Promise<BigNumber>;

    DESOS_FREE(overrides?: CallOverrides): Promise<BigNumber>;

    HOTEL(overrides?: CallOverrides): Promise<BigNumber>;

    MINE(overrides?: CallOverrides): Promise<BigNumber>;

    SALOON(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_NAME(overrides?: CallOverrides): Promise<string>;

    TRADING_POST(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIN_STATION(overrides?: CallOverrides): Promise<BigNumber>;

    WORKER(overrides?: CallOverrides): Promise<BigNumber>;

    _rewardDesos(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    completeWorldActionCooldown(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCompleteWorldActionCooldownEstimatedFee(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentWorldActionCooldownFor(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { actionType: number; cooldownTimestamp: BigNumber }
    >;

    getFreeDesos(recipient: string, overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mineOre(_caller: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintHotel(recipient: string, overrides?: CallOverrides): Promise<void>;

    mintMine(recipient: string, overrides?: CallOverrides): Promise<void>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseFee(baseFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    worldActionASuccessProbabilities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    worldActionCooldowns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    worldActionCooldownsSeconds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;

    URI(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;
  };

  estimateGas: {
    DESOS(overrides?: CallOverrides): Promise<BigNumber>;

    DESOS_FREE(overrides?: CallOverrides): Promise<BigNumber>;

    HOTEL(overrides?: CallOverrides): Promise<BigNumber>;

    MINE(overrides?: CallOverrides): Promise<BigNumber>;

    SALOON(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    TRADING_POST(overrides?: CallOverrides): Promise<BigNumber>;

    TRAIN_STATION(overrides?: CallOverrides): Promise<BigNumber>;

    WORKER(overrides?: CallOverrides): Promise<BigNumber>;

    _rewardDesos(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeWorldActionCooldown(
      _caller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCompleteWorldActionCooldownEstimatedFee(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentWorldActionCooldownFor(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreeDesos(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mineOre(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintHotel(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintMine(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseFee(
      baseFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    worldActionASuccessProbabilities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worldActionCooldowns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worldActionCooldownsSeconds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DESOS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DESOS_FREE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HOTEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SALOON(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRADING_POST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRAIN_STATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WORKER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _rewardDesos(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeWorldActionCooldown(
      _caller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCompleteWorldActionCooldownEstimatedFee(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentWorldActionCooldownFor(
      _caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreeDesos(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mineOre(
      _caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintHotel(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintMine(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseFee(
      baseFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    worldActionASuccessProbabilities(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    worldActionCooldowns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    worldActionCooldownsSeconds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
